name: Pull Request

on:
  pull_request:
    branches: [main]
  # building on push allows cache hits on the first push of a new pull request
  push:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-rust:
    name: Test Rust
    runs-on: ubuntu-latest

    services:
      redis:
        image: "redis:6"
        ports:
          - "6379:6379"
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 3s
          --health-timeout 1s
          --health-retries 5

      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rogue_wizard
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 3s
          --health-timeout 1s
          --health-retries 5

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Env
        run: |
          echo "SQLX_VERSION=0.5.7" >> $GITHUB_ENV
          echo "SQLX_FEATURES=postgres" >> $GITHUB_ENV
          echo "APP_DIST=$GITHUB_WORKSPACE/client/public/dist" >> $GITHUB_ENV
          echo "APP_ENV=local" >> $GITHUB_ENV
          echo "APP_HOST=localhost" >> $GITHUB_ENV
          echo "APP_PORT=8080" >> $GITHUB_ENV
          echo "APP_URL=http://localhost:8000" >> $GITHUB_ENV
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/rogue_wizard" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "APP_SIGNING_SECRET=DEZ+TXqTNjb+qQu05MibWt4151A9wc1ZynbWv3dU8sBE+39IPJz9ZMDfQplUzrVLywDs9oNxboZzPmK892vx2Q==" >> $GITHUB_ENV

      - name: Cache Dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Cache sqlx-cli
        uses: actions/cache@v2
        id: cache-sqlx
        with:
          path: |
            ~/.cargo/bin/sqlx
            ~/.cargo/bin/cargo-sqlx
          key: ${{ runner.os }}-sqlx-${{ env.SQLX_VERSION }}-${{ env.SQLX_FEATURES }}

      - name: Install sqlx-cli
        uses: actions-rs/cargo@v1
        if: steps.cache-sqlx.outputs.cache-hit == false
        with:
          command: install
          args: >
            sqlx-cli
            --force
            --version=${{ env.SQLX_VERSION }}
            --features=${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked

      - name: Migrate Database
        run: |
          sudo apt-get install libpq-dev -y
          sqlx database create
          sqlx migrate run

      - name: Check sqlx-data.json
        run: |
          cargo sqlx prepare --check -- --bin vibe_spam

      - name: Make Fake Assets Files
        # these have to exist for the server to start,
        # but the js is currently unused by tests
        run: |
          mkdir -p $APP_DIST/assets
          touch $APP_DIST/assets/index.js

      - name: Cargo Test
        uses: actions-rs/cargo@v1
        with:
          command: test

  clippy:
    name: Clippy Check
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rogue_wizard
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 3s
          --health-timeout 1s
          --health-retries 5

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Env
        run: |
          echo "SQLX_VERSION=0.5.7" >> $GITHUB_ENV
          echo "SQLX_FEATURES=postgres" >> $GITHUB_ENV
          echo "APP_DIST=$GITHUB_WORKSPACE/client/public/dist" >> $GITHUB_ENV
          echo "APP_ENV=local" >> $GITHUB_ENV
          echo "APP_HOST=localhost" >> $GITHUB_ENV
          echo "APP_PORT=8080" >> $GITHUB_ENV
          echo "APP_URL=http://localhost:8000" >> $GITHUB_ENV
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/rogue_wizard" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "APP_SIGNING_SECRET=DEZ+TXqTNjb+qQu05MibWt4151A9wc1ZynbWv3dU8sBE+39IPJz9ZMDfQplUzrVLywDs9oNxboZzPmK892vx2Q==" >> $GITHUB_ENV

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true

      - name: Cache sqlx-cli
        uses: actions/cache@v2
        id: cache-sqlx
        with:
          path: |
            ~/.cargo/bin/sqlx
          key: ${{ runner.os }}-sqlx-${{ env.SQLX_VERSION }}-${{ env.SQLX_FEATURES }}

      - name: Install sqlx-cli
        uses: actions-rs/cargo@v1
        if: steps.cache-sqlx.outputs.cache-hit == false
        with:
          command: install
          args: >
            sqlx-cli
            --force
            --version=${{ env.SQLX_VERSION }}
            --features=${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked

      - name: Migrate Database
        run: |
          sudo apt-get install libpq-dev -y
          sqlx database create
          sqlx migrate run

      - name: Run Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- -D warnings

  cargo-fmt:
    name: Check Rust Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt
      - name: Cargo Format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --check

  test-elm:
    name: Test Elm
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "npm"
          cache-dependency-path: client/package-lock.json

      - run: npm run build:github
        working-directory: client

      - run: npx elm-format --validate src
        working-directory: client

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v2.1

      - name: Rebuild Docker Image
        if: contains(steps.changed-files.outputs.modified_files, 'Dockerfile')
        uses: docker/build-push-action@v1.1.2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: giesch/rogue-wizard
          path: .
          dockerfile: ./Dockerfile
          tags: rogue-wizard
          push: false
